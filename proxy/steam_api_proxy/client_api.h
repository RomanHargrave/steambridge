// client_api.h - Autogenerated header for ISteamClient
// Copyright (c) 2014 Bryan DeGrendel
//
// See COPYING and license/LICENSE.steambridge for license information

#pragma once

#include "types.h"

class ISteamClient;
class ISteamUser;
class ISteamGameServer;
class ISteamFriends;
class ISteamUtils;
class ISteamMatchmaking;
class ISteamMatchmakingServers;
class ISteamUserStats;
class ISteamGameServerStats;
class ISteamApps;
class ISteamNetworking;
class ISteamRemoteStorage;
class ISteamScreenshots;
class ISteamHTTP;
class ISteamUnifiedMessages;

class SteamClient
{
  public:
    virtual HSteamPipe CreateSteamPipe();
    virtual bool BReleaseSteamPipe(HSteamPipe hSteamPipe);
    virtual HSteamUser ConnectToGlobalUser(HSteamPipe hSteamPipe);
    virtual HSteamUser CreateLocalUser(HSteamPipe *phSteamPipe, EAccountType eAccountType);
    virtual void ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser);
    virtual ISteamUser *GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    virtual ISteamGameServer *GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    virtual void SetLocalIPBinding(uint32 unIP, uint16 usPort);
    virtual ISteamFriends *GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    virtual ISteamUtils *GetISteamUtils(HSteamPipe hSteamPipe, const char *pchVersion);
    virtual ISteamMatchmaking *GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    virtual ISteamMatchmakingServers *GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    virtual void *GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    virtual ISteamUserStats *GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    virtual ISteamGameServerStats *GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion);
    virtual ISteamApps *GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    virtual ISteamNetworking *GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char *pchVersion);
    virtual ISteamRemoteStorage *GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion);
    virtual ISteamScreenshots *GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion);
    virtual void RunFrame();
    virtual uint32 GetIPCCallCount();
    virtual void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);
    virtual bool BShutdownIfAllPipesClosed();
    virtual ISteamHTTP *GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion);
    virtual ISteamUnifiedMessages *GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, const char *pchVersion);

    SteamClient();

  private:
    ISteamClient *steamClient;

};
