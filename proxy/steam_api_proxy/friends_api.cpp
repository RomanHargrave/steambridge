// friends_api.cpp - Autogenerated source for ISteamFriends
// Copyright (c) 2014 Bryan DeGrendel
//
// See COPYING and license/LICENSE.steambridge for license information

#include "stdafx.h"

#include "logging.h"
#include "state.h"
#include "steam_api_proxy.h"
#include "types.h"

#include "friends_api.h"

#include <steam_api_bridge.h>

SteamFriends::SteamFriends() : steamFriends(NULL)
{
  __TRACE("(this=0x%p)", this);
  steamFriends = SteamFriends_();
  __LOG("Wrapping ISteamFriends (0x%p) into (0x%p)", steamFriends, this);
}

const char *SteamFriends::GetPersonaName()
{
  __TRACE("()");
  char *result;
  __asm
  {
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+0]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
  }
  return result;
}

SteamAPICall_t SteamFriends::SetPersonaName(const char *pchPersonaName)
{
  __TRACE("(\"%s\",)", pchPersonaName);
  SteamAPICall_t result;
  __asm
  {
    // Push function arguments
    mov eax, pchPersonaName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+4]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    // including this pointer
    pop eax
    pop eax
  }
  return result;
}

EPersonaState SteamFriends::GetPersonaState()
{
  __TRACE("()");
  EPersonaState result;
  __asm
  {
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+8]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
  }
  return result;
}

int SteamFriends::GetFriendCount(int iFriendFlags)
{
  __TRACE("(%i,)", iFriendFlags);
  int result;
  __asm
  {
    // Push function arguments
    mov eax, iFriendFlags
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+12]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
  }
  return result;
}

CSteamID SteamFriends::GetFriendByIndex(int iFriend, int iFriendFlags)
{
  __TRACE("(%i,%i,)", iFriend, iFriendFlags);
  CSteamID result;
  __asm
  {
    // Push function arguments
    mov eax, iFriendFlags
    push eax
    // Push function arguments
    mov eax, iFriend
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+16]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

EFriendRelationship SteamFriends::GetFriendRelationship(CSteamID steamIDFriend)
{
  __TRACE("(%llu,)", steamIDFriend);
  EFriendRelationship result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+20]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

EPersonaState SteamFriends::GetFriendPersonaState(CSteamID steamIDFriend)
{
  __TRACE("(%llu,)", steamIDFriend);
  EPersonaState result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+24]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

const char *SteamFriends::GetFriendPersonaName(CSteamID steamIDFriend)
{
  __TRACE("(%llu,)", steamIDFriend);
  char *result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+28]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

bool SteamFriends::GetFriendGamePlayed(CSteamID steamIDFriend, FriendGameInfo_t *pFriendGameInfo)
{
  __TRACE("(%llu,0x%p,)", steamIDFriend, pFriendGameInfo);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pFriendGameInfo
    push eax
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+32]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

const char *SteamFriends::GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName)
{
  __TRACE("(%llu,%i,)", steamIDFriend, iPersonaName);
  char *result;
  __asm
  {
    // Push function arguments
    mov eax, iPersonaName
    push eax
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+36]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

bool SteamFriends::HasFriend(CSteamID steamIDFriend, int iFriendFlags)
{
  __TRACE("(%llu,%i,)", steamIDFriend, iFriendFlags);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, iFriendFlags
    push eax
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+40]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

int SteamFriends::GetClanCount()
{
  __TRACE("()");
  int result;
  __asm
  {
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+44]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
  }
  return result;
}

CSteamID SteamFriends::GetClanByIndex(int iClan)
{
  __TRACE("(%i,)", iClan);
  CSteamID result;
  __asm
  {
    // Push function arguments
    mov eax, iClan
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+48]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    // including this pointer
    pop eax
    pop eax
  }
  return result;
}

const char *SteamFriends::GetClanName(CSteamID steamIDClan)
{
  __TRACE("(%llu,)", steamIDClan);
  char *result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDClan
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+52]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

const char *SteamFriends::GetClanTag(CSteamID steamIDClan)
{
  __TRACE("(%llu,)", steamIDClan);
  char *result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDClan
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+56]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

bool SteamFriends::GetClanActivityCounts(CSteamID steamIDClan, int *pnOnline, int *pnInGame, int *pnChatting)
{
  __TRACE("(%llu,0x%p,0x%p,0x%p,)", steamIDClan, pnOnline, pnInGame, pnChatting);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pnChatting
    push eax
    // Push function arguments
    mov eax, pnInGame
    push eax
    // Push function arguments
    mov eax, pnOnline
    push eax
    // Push function arguments
    lea edx, steamIDClan
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+60]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

SteamAPICall_t SteamFriends::DownloadClanActivityCounts(CSteamID *psteamIDClans, int cClansToRequest)
{
  __TRACE("(0x%p,%i,)", psteamIDClans, cClansToRequest);
  SteamAPICall_t result;
  __asm
  {
    // Push function arguments
    mov eax, cClansToRequest
    push eax
    // Push function arguments
    mov eax, psteamIDClans
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+64]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

int SteamFriends::GetFriendCountFromSource(CSteamID steamIDSource)
{
  __TRACE("(%llu,)", steamIDSource);
  int result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDSource
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+68]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

CSteamID SteamFriends::GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend)
{
  __TRACE("(%llu,%i,)", steamIDSource, iFriend);
  CSteamID result;
  __asm
  {
    // Push function arguments
    mov eax, iFriend
    push eax
    // Push function arguments
    lea edx, steamIDSource
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+72]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

bool SteamFriends::IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource)
{
  __TRACE("(%llu,%llu,)", steamIDUser, steamIDSource);
  bool result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDSource
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push function arguments
    lea edx, steamIDUser
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+76]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

void SteamFriends::SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking)
{
  __TRACE("(%llu,%i,)", steamIDUser, bSpeaking);
  __asm
  {
    // Push function arguments
    mov al, bSpeaking
    push eax
    // Push function arguments
    lea edx, steamIDUser
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+80]
    // Call that memory location
    call eax
    // Move the returned value into the result
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
  }
}

void SteamFriends::ActivateGameOverlay(const char *pchDialog)
{
  __TRACE("(\"%s\",)", pchDialog);
  __asm
  {
    // Push function arguments
    mov eax, pchDialog
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+84]
    // Call that memory location
    call eax
    // Move the returned value into the result
    // restore stack
    // including this pointer
    pop eax
    pop eax
  }
}

void SteamFriends::ActivateGameOverlayToUser(const char *pchDialog, CSteamID steamID)
{
  __TRACE("(\"%s\",%llu,)", pchDialog, steamID);
  __asm
  {
    // Push function arguments
    lea edx, steamID
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push function arguments
    mov eax, pchDialog
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+88]
    // Call that memory location
    call eax
    // Move the returned value into the result
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
  }
}

void SteamFriends::ActivateGameOverlayToWebPage(const char *pchURL)
{
  __TRACE("(\"%s\",)", pchURL);
  __asm
  {
    // Push function arguments
    mov eax, pchURL
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+92]
    // Call that memory location
    call eax
    // Move the returned value into the result
    // restore stack
    // including this pointer
    pop eax
    pop eax
  }
}

void SteamFriends::ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag)
{
  __TRACE("(%u,%i,)", nAppID, eFlag);
  __asm
  {
    // Push function arguments
    mov eax, eFlag
    push eax
    // Push function arguments
    mov eax, nAppID
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+96]
    // Call that memory location
    call eax
    // Move the returned value into the result
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
}

void SteamFriends::SetPlayedWith(CSteamID steamIDUserPlayedWith)
{
  __TRACE("(%llu,)", steamIDUserPlayedWith);
  __asm
  {
    // Push function arguments
    lea edx, steamIDUserPlayedWith
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+100]
    // Call that memory location
    call eax
    // Move the returned value into the result
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
}

void SteamFriends::ActivateGameOverlayInviteDialog(CSteamID steamIDLobby)
{
  __TRACE("(%llu,)", steamIDLobby);
  __asm
  {
    // Push function arguments
    lea edx, steamIDLobby
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+104]
    // Call that memory location
    call eax
    // Move the returned value into the result
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
}

int SteamFriends::GetSmallFriendAvatar(CSteamID steamIDFriend)
{
  __TRACE("(%llu,)", steamIDFriend);
  int result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+108]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

int SteamFriends::GetMediumFriendAvatar(CSteamID steamIDFriend)
{
  __TRACE("(%llu,)", steamIDFriend);
  int result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+112]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

int SteamFriends::GetLargeFriendAvatar(CSteamID steamIDFriend)
{
  __TRACE("(%llu,)", steamIDFriend);
  int result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+116]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

bool SteamFriends::RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly)
{
  __TRACE("(%llu,%i,)", steamIDUser, bRequireNameOnly);
  bool result;
  __asm
  {
    // Push function arguments
    mov al, bRequireNameOnly
    push eax
    // Push function arguments
    lea edx, steamIDUser
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+120]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

SteamAPICall_t SteamFriends::RequestClanOfficerList(CSteamID steamIDClan)
{
  __TRACE("(%llu,)", steamIDClan);
  SteamAPICall_t result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDClan
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+124]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

CSteamID SteamFriends::GetClanOwner(CSteamID steamIDClan)
{
  __TRACE("(%llu,)", steamIDClan);
  CSteamID result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDClan
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+128]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

int SteamFriends::GetClanOfficerCount(CSteamID steamIDClan)
{
  __TRACE("(%llu,)", steamIDClan);
  int result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDClan
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+132]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

CSteamID SteamFriends::GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer)
{
  __TRACE("(%llu,%i,)", steamIDClan, iOfficer);
  CSteamID result;
  __asm
  {
    // Push function arguments
    mov eax, iOfficer
    push eax
    // Push function arguments
    lea edx, steamIDClan
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+136]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

uint32 SteamFriends::GetUserRestrictions()
{
  __TRACE("()");
  uint32 result;
  __asm
  {
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+140]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
  }
  return result;
}

bool SteamFriends::SetRichPresence(const char *pchKey, const char *pchValue)
{
  __TRACE("(\"%s\",\"%s\",)", pchKey, pchValue);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pchValue
    push eax
    // Push function arguments
    mov eax, pchKey
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+144]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

void SteamFriends::ClearRichPresence()
{
  __TRACE("()");
  __asm
  {
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+148]
    // Call that memory location
    call eax
    // Move the returned value into the result
    // restore stack
    // including this pointer
    pop eax
  }
}

const char *SteamFriends::GetFriendRichPresence(CSteamID steamIDFriend, const char *pchKey)
{
  __TRACE("(%llu,\"%s\",)", steamIDFriend, pchKey);
  char *result;
  __asm
  {
    // Push function arguments
    mov eax, pchKey
    push eax
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+152]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

int SteamFriends::GetFriendRichPresenceKeyCount(CSteamID steamIDFriend)
{
  __TRACE("(%llu,)", steamIDFriend);
  int result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+156]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

const char *SteamFriends::GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey)
{
  __TRACE("(%llu,%i,)", steamIDFriend, iKey);
  char *result;
  __asm
  {
    // Push function arguments
    mov eax, iKey
    push eax
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+160]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

void SteamFriends::RequestFriendRichPresence(CSteamID steamIDFriend)
{
  __TRACE("(%llu,)", steamIDFriend);
  __asm
  {
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+164]
    // Call that memory location
    call eax
    // Move the returned value into the result
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
}

bool SteamFriends::InviteUserToGame(CSteamID steamIDFriend, const char *pchConnectString)
{
  __TRACE("(%llu,\"%s\",)", steamIDFriend, pchConnectString);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pchConnectString
    push eax
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+168]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

int SteamFriends::GetCoplayFriendCount()
{
  __TRACE("()");
  int result;
  __asm
  {
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+172]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
  }
  return result;
}

CSteamID SteamFriends::GetCoplayFriend(int iCoplayFriend)
{
  __TRACE("(%i,)", iCoplayFriend);
  CSteamID result;
  __asm
  {
    // Push function arguments
    mov eax, iCoplayFriend
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+176]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    // including this pointer
    pop eax
    pop eax
  }
  return result;
}

int SteamFriends::GetFriendCoplayTime(CSteamID steamIDFriend)
{
  __TRACE("(%llu,)", steamIDFriend);
  int result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+180]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

AppId_t SteamFriends::GetFriendCoplayGame(CSteamID steamIDFriend)
{
  __TRACE("(%llu,)", steamIDFriend);
  AppId_t result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+184]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

SteamAPICall_t SteamFriends::JoinClanChatRoom(CSteamID steamIDClan)
{
  __TRACE("(%llu,)", steamIDClan);
  SteamAPICall_t result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDClan
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+188]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

bool SteamFriends::LeaveClanChatRoom(CSteamID steamIDClan)
{
  __TRACE("(%llu,)", steamIDClan);
  bool result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDClan
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+192]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

int SteamFriends::GetClanChatMemberCount(CSteamID steamIDClan)
{
  __TRACE("(%llu,)", steamIDClan);
  int result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDClan
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+196]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

CSteamID SteamFriends::GetChatMemberByIndex(CSteamID steamIDClan, int iUser)
{
  __TRACE("(%llu,%i,)", steamIDClan, iUser);
  CSteamID result;
  __asm
  {
    // Push function arguments
    mov eax, iUser
    push eax
    // Push function arguments
    lea edx, steamIDClan
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+200]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

bool SteamFriends::SendClanChatMessage(CSteamID steamIDClanChat, const char *pchText)
{
  __TRACE("(%llu,\"%s\",)", steamIDClanChat, pchText);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pchText
    push eax
    // Push function arguments
    lea edx, steamIDClanChat
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+204]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

int SteamFriends::GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, void *prgchText, int cchTextMax, EChatEntryType *eChatEntry, CSteamID *id)
{
  __TRACE("(%llu,%i,0x%p,%i,0x%p,0x%p,)", steamIDClanChat, iMessage, prgchText, cchTextMax, eChatEntry, id);
  int result;
  __asm
  {
    // Push function arguments
    mov eax, id
    push eax
    // Push function arguments
    mov eax, eChatEntry
    push eax
    // Push function arguments
    mov eax, cchTextMax
    push eax
    // Push function arguments
    mov eax, prgchText
    push eax
    // Push function arguments
    mov eax, iMessage
    push eax
    // Push function arguments
    lea edx, steamIDClanChat
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+208]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

bool SteamFriends::IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser)
{
  __TRACE("(%llu,%llu,)", steamIDClanChat, steamIDUser);
  bool result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDUser
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push function arguments
    lea edx, steamIDClanChat
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+212]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

bool SteamFriends::IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat)
{
  __TRACE("(%llu,)", steamIDClanChat);
  bool result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDClanChat
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+216]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

bool SteamFriends::OpenClanChatWindowInSteam(CSteamID steamIDClanChat)
{
  __TRACE("(%llu,)", steamIDClanChat);
  bool result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDClanChat
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+220]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

bool SteamFriends::CloseClanChatWindowInSteam(CSteamID steamIDClanChat)
{
  __TRACE("(%llu,)", steamIDClanChat);
  bool result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDClanChat
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+224]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

bool SteamFriends::SetListenForFriendsMessages(bool bInterceptEnabled)
{
  __TRACE("(%i,)", bInterceptEnabled);
  bool result;
  __asm
  {
    // Push function arguments
    mov al, bInterceptEnabled
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+228]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    // including this pointer
    pop eax
    pop eax
  }
  return result;
}

bool SteamFriends::ReplyToFriendMessage(CSteamID steamIDFriend, const char *pchMsgToSend)
{
  __TRACE("(%llu,\"%s\",)", steamIDFriend, pchMsgToSend);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pchMsgToSend
    push eax
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+232]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

int SteamFriends::GetFriendMessage(CSteamID steamIDFriend, int iMessageID, void *pvData, int cubData, EChatEntryType *peChatEntryType)
{
  __TRACE("(%llu,%i,0x%p,%i,0x%p,)", steamIDFriend, iMessageID, pvData, cubData, peChatEntryType);
  int result;
  __asm
  {
    // Push function arguments
    mov eax, peChatEntryType
    push eax
    // Push function arguments
    mov eax, cubData
    push eax
    // Push function arguments
    mov eax, pvData
    push eax
    // Push function arguments
    mov eax, iMessageID
    push eax
    // Push function arguments
    lea edx, steamIDFriend
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+236]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
    pop eax
    pop eax
    pop eax
    pop eax
  }
  return result;
}

SteamAPICall_t SteamFriends::GetFollowerCount(CSteamID steamID)
{
  __TRACE("(%llu,)", steamID);
  SteamAPICall_t result;
  __asm
  {
    // Push function arguments
    lea edx, steamID
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+240]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

SteamAPICall_t SteamFriends::IsFollowing(CSteamID steamID)
{
  __TRACE("(%llu,)", steamID);
  SteamAPICall_t result;
  __asm
  {
    // Push function arguments
    lea edx, steamID
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+244]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    // including this pointer
    pop eax
    pop eax
    pop eax
  }
  return result;
}

SteamAPICall_t SteamFriends::EnumerateFollowingList(uint32 unStartIndex)
{
  __TRACE("(%u,)", unStartIndex);
  SteamAPICall_t result;
  __asm
  {
    // Push function arguments
    mov eax, unStartIndex
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamFriends
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+248]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    // including this pointer
    pop eax
    pop eax
  }
  return result;
}

#include "friends_api_code.inc"

