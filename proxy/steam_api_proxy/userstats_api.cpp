// userstats_api.cpp - Autogenerated source for ISteamUserStats
// Copyright (c) 2014 Bryan DeGrendel
//
// See COPYING and license/LICENSE.steambridge for license information

#include "stdafx.h"

#include "logging.h"
#include "state.h"
#include "steam_api_proxy.h"
#include "types.h"

#include "userstats_api.h"

#include <steam_api_bridge.h>

SteamUserStats::SteamUserStats() : steamUserStats(NULL)
{
  __TRACE("(this=0x%p)", this);
  steamUserStats = SteamUserStats_();
  __LOG("Wrapping ISteamUserStats (0x%p) into (0x%p)", steamUserStats, this);
}

bool SteamUserStats::RequestCurrentStats()
{
  __TRACE("()");
  bool result;
  __asm
  {
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+0]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 4
  }
  return result;
}

bool SteamUserStats::GetStat(const char *pchName, int32 *pData)
{
  __TRACE("(\"%s\",0x%p,)", pchName, pData);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pData
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+4]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 12
  }
  return result;
}

bool SteamUserStats::GetStat(const char *pchName, float *pData)
{
  __TRACE("(\"%s\",0x%p,)", pchName, pData);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pData
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+8]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 12
  }
  return result;
}

bool SteamUserStats::SetStat(const char *pchName, int32 nData)
{
  __TRACE("(\"%s\",%i,)", pchName, nData);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, nData
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+12]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 12
  }
  return result;
}

bool SteamUserStats::SetStat(const char *pchName, float fData)
{
  __TRACE("(\"%s\",%f,)", pchName, fData);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, fData
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+16]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 12
  }
  return result;
}

bool SteamUserStats::UpdateAvgRateStat(const char *pchName, float flCountThisSession, double dSessionLength)
{
  __TRACE("(\"%s\",%f,%f,)", pchName, flCountThisSession, dSessionLength);
  bool result;
  __asm
  {
    // Push function arguments
    lea edx, dSessionLength
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push function arguments
    mov eax, flCountThisSession
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+20]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 20
  }
  return result;
}

bool SteamUserStats::GetAchievement(const char *pchName, bool *pbAchieved)
{
  __TRACE("(\"%s\",0x%p,)", pchName, pbAchieved);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pbAchieved
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+24]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 12
  }
  return result;
}

bool SteamUserStats::SetAchievement(const char *pchName)
{
  __TRACE("(\"%s\",)", pchName);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pchName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+28]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 8
  }
  return result;
}

bool SteamUserStats::ClearAchievement(const char *pchName)
{
  __TRACE("(\"%s\",)", pchName);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pchName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+32]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 8
  }
  return result;
}

bool SteamUserStats::GetAchievementAndUnlockTime(const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)
{
  __TRACE("(\"%s\",0x%p,0x%p,)", pchName, pbAchieved, punUnlockTime);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, punUnlockTime
    push eax
    // Push function arguments
    mov eax, pbAchieved
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+36]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 16
  }
  return result;
}

bool SteamUserStats::StoreStats()
{
  __TRACE("()");
  bool result;
  __asm
  {
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+40]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 4
  }
  return result;
}

int SteamUserStats::GetAchievementIcon(const char *pchName)
{
  __TRACE("(\"%s\",)", pchName);
  int result;
  __asm
  {
    // Push function arguments
    mov eax, pchName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+44]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    add esp, 8
  }
  return result;
}

const char *SteamUserStats::GetAchievementDisplayAttribute(const char *pchName, const char *pchKey)
{
  __TRACE("(\"%s\",\"%s\",)", pchName, pchKey);
  const char *result;
  __asm
  {
    // Push function arguments
    mov eax, pchKey
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+48]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    add esp, 12
  }
  return result;
}

bool SteamUserStats::IndicateAchievementProgress(const char *pchName, uint32 nCurProgress, uint32 nMaxProgress)
{
  __TRACE("(\"%s\",%u,%u,)", pchName, nCurProgress, nMaxProgress);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, nMaxProgress
    push eax
    // Push function arguments
    mov eax, nCurProgress
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+52]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 16
  }
  return result;
}

uint32 SteamUserStats::GetNumAchievements()
{
  __TRACE("()");
  uint32 result;
  __asm
  {
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+56]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    add esp, 4
  }
  return result;
}

const char *SteamUserStats::GetAchievementName(uint32 iAchievement)
{
  __TRACE("(%u,)", iAchievement);
  const char *result;
  __asm
  {
    // Push function arguments
    mov eax, iAchievement
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+60]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    add esp, 8
  }
  return result;
}

SteamAPICall_t SteamUserStats::RequestUserStats(CSteamID steamIDUser)
{
  __TRACE("(%llu,)", steamIDUser);
  SteamAPICall_t result;
  __asm
  {
    // Push function arguments
    lea edx, steamIDUser
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+64]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    add esp, 12
  }
  return result;
}

bool SteamUserStats::GetUserStat(CSteamID steamIDUser, const char *pchName, int32 *pData)
{
  __TRACE("(%llu,\"%s\",0x%p,)", steamIDUser, pchName, pData);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pData
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push function arguments
    lea edx, steamIDUser
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+68]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 20
  }
  return result;
}

bool SteamUserStats::GetUserStat(CSteamID steamIDUser, const char *pchName, float *pData)
{
  __TRACE("(%llu,\"%s\",0x%p,)", steamIDUser, pchName, pData);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pData
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push function arguments
    lea edx, steamIDUser
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+72]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 20
  }
  return result;
}

bool SteamUserStats::GetUserAchievement(CSteamID steamIDUser, const char *pchName, bool *pbAchieved)
{
  __TRACE("(%llu,\"%s\",0x%p,)", steamIDUser, pchName, pbAchieved);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pbAchieved
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push function arguments
    lea edx, steamIDUser
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+76]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 20
  }
  return result;
}

bool SteamUserStats::GetUserAchievementAndUnlockTime(CSteamID steamIDUser, const char *pchName, bool *pbAchieved, uint32 *punUnlockTime)
{
  __TRACE("(%llu,\"%s\",0x%p,0x%p,)", steamIDUser, pchName, pbAchieved, punUnlockTime);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, punUnlockTime
    push eax
    // Push function arguments
    mov eax, pbAchieved
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push function arguments
    lea edx, steamIDUser
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+80]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 24
  }
  return result;
}

bool SteamUserStats::ResetAllStats(bool bAchievementsToo)
{
  __TRACE("(%i,)", bAchievementsToo);
  bool result;
  __asm
  {
    // Push function arguments
    mov al, bAchievementsToo
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+84]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 8
  }
  return result;
}

SteamAPICall_t SteamUserStats::FindOrCreateLeaderboard(const char *pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)
{
  __TRACE("(\"%s\",%i,%i,)", pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
  SteamAPICall_t result;
  __asm
  {
    // Push function arguments
    mov eax, eLeaderboardDisplayType
    push eax
    // Push function arguments
    mov eax, eLeaderboardSortMethod
    push eax
    // Push function arguments
    mov eax, pchLeaderboardName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+88]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    add esp, 16
  }
  return result;
}

SteamAPICall_t SteamUserStats::FindLeaderboard(const char *pchLeaderboardName)
{
  __TRACE("(\"%s\",)", pchLeaderboardName);
  SteamAPICall_t result;
  __asm
  {
    // Push function arguments
    mov eax, pchLeaderboardName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+92]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    add esp, 8
  }
  return result;
}

const char *SteamUserStats::GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard)
{
  __TRACE("(%llu,)", hSteamLeaderboard);
  const char *result;
  __asm
  {
    // Push function arguments
    lea edx, hSteamLeaderboard
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+96]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    add esp, 12
  }
  return result;
}

int SteamUserStats::GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard)
{
  __TRACE("(%llu,)", hSteamLeaderboard);
  int result;
  __asm
  {
    // Push function arguments
    lea edx, hSteamLeaderboard
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+100]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    add esp, 12
  }
  return result;
}

ELeaderboardSortMethod SteamUserStats::GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard)
{
  __TRACE("(%llu,)", hSteamLeaderboard);
  ELeaderboardSortMethod result;
  __asm
  {
    // Push function arguments
    lea edx, hSteamLeaderboard
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+104]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    add esp, 12
  }
  return result;
}

ELeaderboardDisplayType SteamUserStats::GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard)
{
  __TRACE("(%llu,)", hSteamLeaderboard);
  ELeaderboardDisplayType result;
  __asm
  {
    // Push function arguments
    lea edx, hSteamLeaderboard
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+108]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    add esp, 12
  }
  return result;
}

SteamAPICall_t SteamUserStats::DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
{
  __TRACE("(%llu,%i,%i,%i,)", hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
  SteamAPICall_t result;
  __asm
  {
    // Push function arguments
    mov eax, nRangeEnd
    push eax
    // Push function arguments
    mov eax, nRangeStart
    push eax
    // Push function arguments
    mov eax, eLeaderboardDataRequest
    push eax
    // Push function arguments
    lea edx, hSteamLeaderboard
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+112]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    add esp, 24
  }
  return result;
}

SteamAPICall_t SteamUserStats::DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID *prgUsers, int cUsers)
{
  __TRACE("(%llu,0x%p,%i,)", hSteamLeaderboard, prgUsers, cUsers);
  SteamAPICall_t result;
  __asm
  {
    // Push function arguments
    mov eax, cUsers
    push eax
    // Push function arguments
    mov eax, prgUsers
    push eax
    // Push function arguments
    lea edx, hSteamLeaderboard
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+116]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    add esp, 20
  }
  return result;
}

bool SteamUserStats::GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, LeaderboardEntry_t *pLeaderboardEntry, int32 *pDetails, int cDetailsMax)
{
  __TRACE("(%llu,%i,0x%p,0x%p,%i,)", hSteamLeaderboardEntries, index, pLeaderboardEntry, pDetails, cDetailsMax);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, cDetailsMax
    push eax
    // Push function arguments
    mov eax, pDetails
    push eax
    // Push function arguments
    mov eax, pLeaderboardEntry
    push eax
    // Push function arguments
    mov eax, index
    push eax
    // Push function arguments
    lea edx, hSteamLeaderboardEntries
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+120]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 28
  }
  return result;
}

SteamAPICall_t SteamUserStats::UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 *pScoreDetails, int cScoreDetailsCount)
{
  __TRACE("(%llu,%i,%i,%i,%i,)", hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
  SteamAPICall_t result;
  __asm
  {
    // Push function arguments
    mov eax, cScoreDetailsCount
    push eax
    // Push function arguments
    mov eax, pScoreDetails
    push eax
    // Push function arguments
    mov eax, nScore
    push eax
    // Push function arguments
    mov eax, eLeaderboardUploadScoreMethod
    push eax
    // Push function arguments
    lea edx, hSteamLeaderboard
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+124]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    add esp, 28
  }
  return result;
}

SteamAPICall_t SteamUserStats::AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
{
  __TRACE("(%llu,%llu,)", hSteamLeaderboard, hUGC);
  SteamAPICall_t result;
  __asm
  {
    // Push function arguments
    lea edx, hUGC
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push function arguments
    lea edx, hSteamLeaderboard
    mov eax, [edx+4]
    push eax
    mov eax, [edx+0]
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+128]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    add esp, 20
  }
  return result;
}

SteamAPICall_t SteamUserStats::GetNumberOfCurrentPlayers()
{
  __TRACE("()");
  SteamAPICall_t result;
  __asm
  {
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+132]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    add esp, 4
  }
  return result;
}

SteamAPICall_t SteamUserStats::RequestGlobalAchievementPercentages()
{
  __TRACE("()");
  SteamAPICall_t result;
  __asm
  {
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+136]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    add esp, 4
  }
  return result;
}

int SteamUserStats::GetMostAchievedAchievementInfo(char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)
{
  __TRACE("(0x%p,%u,0x%p,0x%p,)", pchName, unNameBufLen, pflPercent, pbAchieved);
  int result;
  __asm
  {
    // Push function arguments
    mov eax, pbAchieved
    push eax
    // Push function arguments
    mov eax, pflPercent
    push eax
    // Push function arguments
    mov eax, unNameBufLen
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+140]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    add esp, 20
  }
  return result;
}

int SteamUserStats::GetNextMostAchievedAchievementInfo(int iIteratorPrevious, char *pchName, uint32 unNameBufLen, float *pflPercent, bool *pbAchieved)
{
  __TRACE("(%i,0x%p,%u,0x%p,0x%p,)", iIteratorPrevious, pchName, unNameBufLen, pflPercent, pbAchieved);
  int result;
  __asm
  {
    // Push function arguments
    mov eax, pbAchieved
    push eax
    // Push function arguments
    mov eax, pflPercent
    push eax
    // Push function arguments
    mov eax, unNameBufLen
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push function arguments
    mov eax, iIteratorPrevious
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+144]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    add esp, 24
  }
  return result;
}

bool SteamUserStats::GetAchievementAchievedPercent(const char *pchName, float *pflPercent)
{
  __TRACE("(\"%s\",0x%p,)", pchName, pflPercent);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pflPercent
    push eax
    // Push function arguments
    mov eax, pchName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+148]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 12
  }
  return result;
}

SteamAPICall_t SteamUserStats::RequestGlobalStats(int nHistoryDays)
{
  __TRACE("(%i,)", nHistoryDays);
  SteamAPICall_t result;
  __asm
  {
    // Push function arguments
    mov eax, nHistoryDays
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+152]
    // Call that memory location
    call eax
    // Move the returned value into the result
    lea ecx, result
    mov [ecx+0], eax
    mov [ecx+4], edx
    // restore stack
    add esp, 8
  }
  return result;
}

bool SteamUserStats::GetGlobalStat(const char *pchStatName, int64 *pData)
{
  __TRACE("(\"%s\",0x%p,)", pchStatName, pData);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pData
    push eax
    // Push function arguments
    mov eax, pchStatName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+156]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 12
  }
  return result;
}

bool SteamUserStats::GetGlobalStat(const char *pchStatName, double *pData)
{
  __TRACE("(\"%s\",0x%p,)", pchStatName, pData);
  bool result;
  __asm
  {
    // Push function arguments
    mov eax, pData
    push eax
    // Push function arguments
    mov eax, pchStatName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+160]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, al
    // restore stack
    add esp, 12
  }
  return result;
}

int32 SteamUserStats::GetGlobalStatHistory(const char *pchStatName, int64 *pData, uint32 cubData)
{
  __TRACE("(\"%s\",0x%p,%u,)", pchStatName, pData, cubData);
  int32 result;
  __asm
  {
    // Push function arguments
    mov eax, cubData
    push eax
    // Push function arguments
    mov eax, pData
    push eax
    // Push function arguments
    mov eax, pchStatName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+164]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    add esp, 16
  }
  return result;
}

int32 SteamUserStats::GetGlobalStatHistory(const char *pchStatName, double *pData, uint32 cubData)
{
  __TRACE("(\"%s\",0x%p,%u,)", pchStatName, pData, cubData);
  int32 result;
  __asm
  {
    // Push function arguments
    mov eax, cubData
    push eax
    // Push function arguments
    mov eax, pData
    push eax
    // Push function arguments
    mov eax, pchStatName
    push eax
    // Push Linux-side 'this'
    mov eax, [this]
    mov eax, [eax]this.steamUserStats
    push eax
    // Get the vtable (pointer at this)
    mov eax, [eax]
    // Lookup the pointer in the vtable
    mov eax, [eax+168]
    // Call that memory location
    call eax
    // Move the returned value into the result
    mov result, eax
    // restore stack
    add esp, 16
  }
  return result;
}

#include "userstats_api_code.inc"

